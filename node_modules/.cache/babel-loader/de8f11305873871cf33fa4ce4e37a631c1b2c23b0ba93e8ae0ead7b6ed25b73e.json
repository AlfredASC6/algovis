{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alfred\\\\Desktop\\\\AlgoVisualizer\\\\my-app\\\\src\\\\algovis\\\\algovis.jsx\";\nimport React, { Component } from 'react';\nimport Node from './Node/Node';\nimport './algovis.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class algovis extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nodes: []\n    };\n  }\n  componentDidMount() {\n    const nodes = [];\n    for (let row = 0; row < 20; row++) {\n      const currentRow = [];\n      for (let col = 0; col < 50; col++) {\n        const currentNode = {\n          col,\n          row,\n          isStart: row === 10 && col === 5,\n          isFinish: row === 10 && col === 45\n        };\n        currentRow.push(currentNode);\n        // console.log(currentNode);\n      }\n\n      nodes.push(currentRow);\n    }\n    this.setState({\n      nodes\n    });\n  }\n  render() {\n    const {\n      nodes\n    } = this.state;\n    // console.log(nodes);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: nodes.map((row, rowIdx) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [row.map((node, nodeIdx) => {\n            const {\n              isStart,\n              isFinish\n            } = node;\n            // console.log(isFinish);\n            // console.log(isStart);\n            return /*#__PURE__*/_jsxDEV(Node, {\n              isStart: isStart,\n              isFinish: isFinish,\n              test: 'foo',\n              test1: 'bar'\n            }, nodeIdx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 33\n            }, this);\n          }), \";\"]\n        }, rowIdx, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this);\n  }\n}\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};","map":{"version":3,"names":["React","Component","Node","jsxDEV","_jsxDEV","algovis","constructor","props","state","nodes","componentDidMount","row","currentRow","col","currentNode","isStart","isFinish","push","setState","render","className","children","map","rowIdx","node","nodeIdx","test","test1","fileName","_jsxFileName","lineNumber","columnNumber","getInitialGrid","grid","createNode","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","distance","Infinity","isVisited","isWall","previousNode"],"sources":["C:/Users/Alfred/Desktop/AlgoVisualizer/my-app/src/algovis/algovis.jsx"],"sourcesContent":["import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\nimport './algovis.css'\r\n\r\nexport default class algovis extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {nodes:[],};\r\n    }\r\n\r\n    componentDidMount(){\r\n        const nodes = [];\r\n        for(let  row= 0; row < 20; row++){\r\n            const currentRow = [];\r\n            for(let col = 0; col < 50; col++){\r\n                const currentNode = {\r\n                    col,\r\n                    row,\r\n                    isStart: row === 10 && col === 5,\r\n                    isFinish: row === 10 && col === 45,\r\n                };\r\n                currentRow.push(currentNode);\r\n                // console.log(currentNode);\r\n            }\r\n            nodes.push(currentRow);\r\n        }\r\n\r\n        this.setState({nodes});\r\n    }  \r\n\r\n    render(){ \r\n        const {nodes} = this.state;\r\n        // console.log(nodes);\r\n        return(\r\n            <div className=\"grid\">\r\n                {nodes.map((row, rowIdx) =>{\r\n                    return (\r\n                    <div key={rowIdx}> \r\n                        {row.map((node, nodeIdx)=>{\r\n                            const {isStart, isFinish} = node;\r\n                            // console.log(isFinish);\r\n                            // console.log(isStart);\r\n                            return(\r\n                                <Node \r\n                                key={nodeIdx} \r\n                                isStart={isStart} \r\n                                isFinish={isFinish}\r\n                                test={'foo'}\r\n                                test1={'bar'}></Node>\r\n                            )\r\n                        })};\r\n                    </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst getInitialGrid = () =>{\r\n    const grid = [];\r\n    for(let row = 0; row < 20; row++){\r\n        const currentRow = [];\r\n        for(let col = 0; col < 50; col++){\r\n            currentRow.push(createNode(col, row));\r\n        }\r\n        grid.push(currentRow);\r\n    }\r\n    return grid;\r\n}\r\n\r\nconst createNode = (col, row) => {\r\n    return{\r\n        col, \r\n        row, \r\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n        distance: Infinity,\r\n        isVisited: false,\r\n        isWall: false, \r\n        previousNode: null,\r\n    }\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}