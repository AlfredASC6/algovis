{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alfred\\\\Desktop\\\\AlgoVisualizer\\\\my-app\\\\src\\\\algovis\\\\algovis.jsx\";\nimport React, { Component } from 'react';\nimport Node from './Node/Node';\nimport './algovis.css';\nimport { dijkstra } from './algorithms/dijkstra';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\nexport default class algovis extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      mouseIsPressed: false\n    };\n  }\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({\n      grid\n    });\n  }\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  }\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n  }\n  handleMouseUp() {\n    this.setState({\n      mouseIsPressed: false\n    });\n  }\n  visualizeDijkstra() {\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    this.animateDijkstra();\n  }\n  animateDijkstra(visitedNodesInOrder) {}\n  render() {\n    const {\n      grid\n    } = this.state;\n\n    // console.log(nodes);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.visualizeDijkstra()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid\",\n        children: grid.map((row, rowIdx) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [row.map((node, nodeIdx) => {\n              const {\n                isStart,\n                isFinish\n              } = node;\n              // console.log(isFinish);\n              // console.log(isStart);\n              return /*#__PURE__*/_jsxDEV(Node, {\n                isStart: isStart,\n                isFinish: isFinish,\n                test: 'foo',\n                test1: 'bar'\n              }, nodeIdx, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 33\n              }, this);\n            }), \";\"]\n          }, rowIdx, true, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 21\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n}\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","map":{"version":3,"names":["React","Component","Node","dijkstra","jsxDEV","_jsxDEV","Fragment","_Fragment","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","algovis","constructor","props","state","grid","mouseIsPressed","componentDidMount","getInitialGrid","setState","handleMouseDown","row","col","newGrid","getNewGridWithWallToggled","handleMouseEnter","handleMouseUp","visualizeDijkstra","startNode","finishNode","visitedNodesInOrder","animateDijkstra","render","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","className","map","rowIdx","node","nodeIdx","isStart","isFinish","test","test1","currentRow","push","createNode","distance","Infinity","isVisited","isWall","previousNode","slice","newNode"],"sources":["C:/Users/Alfred/Desktop/AlgoVisualizer/my-app/src/algovis/algovis.jsx"],"sourcesContent":["import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\nimport './algovis.css'\r\nimport {dijkstra} from './algorithms/dijkstra'\r\n\r\nconst START_NODE_ROW = 10;\r\nconst START_NODE_COL = 15;\r\nconst FINISH_NODE_ROW = 10;\r\nconst FINISH_NODE_COL = 35;\r\n\r\n\r\nexport default class algovis extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            grid: [],\r\n            mouseIsPressed: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        const grid = getInitialGrid();\r\n        this.setState({grid});\r\n    }  \r\n\r\n    handleMouseDown(row, col){\r\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n        this.setState({grid: newGrid, mouseIsPressed: true});\r\n    }\r\n\r\n    handleMouseEnter(row, col){\r\n        if(!this.state.mouseIsPressed) return;\r\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n        this.setState({grid: newGrid});\r\n    }\r\n\r\n    handleMouseUp(){\r\n        this.setState({mouseIsPressed: false});\r\n    }\r\n\r\n    visualizeDijkstra(){\r\n        const {grid} = this.state;\r\n        const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n        const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n        const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n\r\n        this.animateDijkstra()\r\n    }\r\n\r\n    animateDijkstra(visitedNodesInOrder){\r\n\r\n    }\r\n\r\n    render(){ \r\n        const {grid} = this.state;  \r\n\r\n        // console.log(nodes);\r\n        return(\r\n            <>\r\n            <button onClick = {() => this.visualizeDijkstra()}>\r\n\r\n            </button>\r\n            <div className=\"grid\">\r\n                {grid.map((row, rowIdx) =>{\r\n                    return (\r\n                    <div key={rowIdx}> \r\n                        {row.map((node, nodeIdx)=>{\r\n                            const {isStart, isFinish} = node;\r\n                            // console.log(isFinish);\r\n                            // console.log(isStart);\r\n                            return(\r\n                                <Node \r\n                                key={nodeIdx} \r\n                                isStart={isStart} \r\n                                isFinish={isFinish}\r\n                                test={'foo'}\r\n                                test1={'bar'}></Node>\r\n                            )\r\n                        })};\r\n                    </div>\r\n                    )\r\n                })}\r\n            </div>\r\n            </>\r\n        )\r\n        \r\n    }\r\n}\r\n\r\nconst getInitialGrid = () =>{\r\n    const grid = [];\r\n    for(let row = 0; row < 20; row++){\r\n        const currentRow = [];\r\n        for(let col = 0; col < 50; col++){\r\n            currentRow.push(createNode(col, row));\r\n        }\r\n        grid.push(currentRow);\r\n    }\r\n    return grid;\r\n}\r\n\r\nconst createNode = (col, row) => {\r\n    return{\r\n        col, \r\n        row, \r\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n        distance: Infinity,\r\n        isVisited: false,\r\n        isWall: false, \r\n        previousNode: null,\r\n    }\r\n}\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) =>{\r\n    const newGrid = grid.slice();\r\n    const node = newGrid[row][col];\r\n    const newNode = {\r\n        ...node,\r\n        isWall: !node.isWall,\r\n    }\r\n    newGrid[row][col] = newNode;\r\n    return newGrid;\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}